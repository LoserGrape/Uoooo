(() => {
  if (window.__J4V4_EXECUTOR_LOADED) {
    return;
  }
  window.__J4V4_EXECUTOR_LOADED = true;

  const STORAGE_KEY = 'j4v4_executor_saves_v3';

  function loadSaves() {
    try {
      return JSON.parse(localStorage.getItem(STORAGE_KEY)) || [];
    } catch { return []; }
  }
  function storeSaves(arr) {
    try { localStorage.setItem(STORAGE_KEY, JSON.stringify(arr)); } catch {}
  }

  const container = document.createElement('div');
  container.id = '__j4v4_executor_root';
  container.style.zIndex = 2147483647; // overlay everything
  container.style.position = 'fixed';
  container.style.left = '40px';
  container.style.top = '60px';

  const sroot = container.attachShadow({mode:'open'});
  sroot.innerHTML = `
  <style>
    :host { all:initial; }
    .panel {
      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, "Roboto Mono", monospace;
      width: 640px; height: 420px;
      border-radius: 8px;
      background: #050505;
      position: relative;
      overflow: hidden;
      display: flex; flex-direction: column;
      border: 4px solid hsl(0,100%,50%);
    }
    .titlebar {
      background: #0b0b0b;
      color: #fff;
      padding: 10px 12px;
      display:flex; align-items:center; justify-content:space-between;
      cursor: grab;
    }
    .title { font-weight:700; font-size:18px; }
    .body { flex:1; display:flex; background:#000; }
    .left { width:140px; background:#111; padding:10px; box-sizing:border-box; display:flex; flex-direction:column; gap:8px; }
    .saveBtn {
      border:2px solid hsl(0,100%,50%);
      border-radius:6px;
      padding:10px;
      text-align:center;
      font-weight:800;
      color:#fff;
      background:transparent;
      cursor:pointer;
    }
    .savesList { margin-top:8px; display:flex; flex-direction:column; gap:6px; overflow:auto; }
    .saveItem {
      border:2px solid hsl(0,100%,50%);
      border-radius:6px;
      padding:6px;
      background:transparent;
      color:#ddd;
      cursor:pointer;
    }
    .editorWrap { flex:1; padding:12px; display:flex; flex-direction:column; gap:8px; }
    textarea {
      flex:1;
      width:100%;
      resize:none;
      background:#060606;
      border:2px solid #111;
      color:#ddd;
      border-radius:6px;
      font-family: inherit;
      font-size:13px;
      padding:12px;
      box-sizing:border-box;
    }
    .footer { display:flex; gap:8px; justify-content:flex-end; }
    .btn {
      border:2px solid hsl(0,100%,50%);
      border-radius:6px;
      padding:6px 10px;
      font-weight:700;
      color:#fff;
      background:transparent;
      cursor:pointer;
    }
  </style>
  <div class="panel" id="panel">
    <div class="titlebar" id="titlebar">
      <div class="title" id="titleText">J4va Execut0r</div>
      <div class="controls">
        <button class="btn" id="minBtn">—</button>
        <button class="btn" id="closeBtn">✕</button>
      </div>
    </div>
    <div class="body">
      <div class="left">
        <div class="saveBtn" id="addSaveBtn">S4VE!!</div>
        <div class="savesList" id="savesList"></div>
      </div>
      <div class="editorWrap">
        <textarea id="editor" placeholder="(insert JavaScript here!!1 :D)"></textarea>
        <div class="footer">
          <button class="btn" id="clearBtn">C1ear!!1</button>
          <button class="btn" id="execBtn">Execute!!1</button>
        </div>
      </div>
    </div>
  </div>
  `;

  document.body.appendChild(container);

  const panel = sroot.getElementById('panel');
  const titlebar = sroot.getElementById('titlebar');
  const titleText = sroot.getElementById('titleText');
  const addSaveBtn = sroot.getElementById('addSaveBtn');
  const savesList = sroot.getElementById('savesList');
  const editor = sroot.getElementById('editor');
  const execBtn = sroot.getElementById('execBtn');
  const clearBtn = sroot.getElementById('clearBtn');
  const minBtn = sroot.getElementById('minBtn');
  const closeBtn = sroot.getElementById('closeBtn');

  // draggable
  (() => {
    let drag=false, dx=0,dy=0;
    titlebar.addEventListener('pointerdown',e=>{
      drag=true;dx=e.clientX-panel.getBoundingClientRect().left;dy=e.clientY-panel.getBoundingClientRect().top;
      titlebar.setPointerCapture(e.pointerId);
    });
    window.addEventListener('pointermove',e=>{
      if(!drag) return;
      panel.style.left=(e.clientX-dx)+'px';
      panel.style.top=(e.clientY-dy)+'px';
      panel.style.position='fixed';
    });
    window.addEventListener('pointerup',()=>{drag=false;});
  })();

  // save system
  function renderSaves(){
    savesList.innerHTML='';
    loadSaves().forEach((s,idx)=>{
      const b=document.createElement('button');
      b.className='saveItem'; b.textContent=s.name;
      b.onclick=()=>{editor.value=s.code;};
      b.oncontextmenu=(ev)=>{ev.preventDefault();const arr=loadSaves();arr.splice(idx,1);storeSaves(arr);renderSaves();};
      savesList.appendChild(b);
    });
  }
  renderSaves();
  addSaveBtn.onclick=()=>{
    const name=prompt('SAVE AS!?'); if(!name) return;
    const arr=loadSaves(); arr.push({name,code:editor.value}); storeSaves(arr); renderSaves();
  };

  clearBtn.onclick=()=>{editor.value='';};

  // EXECUTE: runs code, if successful => remove panel
  execBtn.onclick=()=>{
    const code=editor.value;
    try {
      const el=document.createElement('script');
      el.textContent=`try{${code}}catch(e){console.error(e)}`;
      document.documentElement.appendChild(el);
      el.remove();
      // if it didn't throw immediately, remove panel
      container.remove();
      window.__J4V4_EXECUTOR_LOADED=false;
    } catch(e){ console.error(e); }
  };

  // disable X and -
  minBtn.onclick=()=>{};
  closeBtn.onclick=()=>{};

  // title random swap
  const titles=["J4va Execut0r","JAv4 3xecutoR","Java Execut0r","J4va Execut0r"];
  setInterval(()=>{titleText.textContent=titles[Math.floor(Math.random()*titles.length)];},1000);

  // RGB animation
  let hue=0;
  function animate(){
    hue=(hue+0.8)%360;
    panel.style.borderColor=`hsl(${hue},100%,50%)`;
    sroot.querySelectorAll('.btn,.saveBtn,.saveItem').forEach(el=>{
      el.style.borderColor=`hsl(${hue},100%,50%)`;
    });
    requestAnimationFrame(animate);
  }
  animate();
})();
